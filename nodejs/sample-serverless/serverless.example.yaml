project:
  name: otel
  type: nodejs-example

service: ${self:project.name}-${self:project.type}

provider:
  name: aws
  profile: ${self:service}-${self:provider.stage}
  stage: ${env:STAGE, 'dev'}
  region: ${env:AWS_REGION, 'eu-west-1'}
  stackName: ${self:service}-${self:provider.stage}
  lambdaHashingVersion: 20201221
  runtime: nodejs14.x
  tracing:
    lambda: Active
  memorySize: 384
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sns:Publish
        - s3:PutObject
        - lambda:InvokeFunction
        - states:StartExecution
      Resource: "*"

  environment:
    # Open Telemetry
    # AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
    # OTEL_LOG_LEVEL: debug
    # OTEL_TRACES_EXPORTER: logging # otlp
    # OTEL_METRICS_EXPORTER: logging # otlp
    # OTEL_PROPAGATORS: tracecontext
    # OTEL_TRACES_SAMPLER: always_on
    # OTEL_EXPORTER_OTLP_ENDPOINT: https://stackstate.trace-agent.ngrok.io/open-telemetry
    # OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: https://stackstate.trace-agent.ngrok.io/open-telemetry

    AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
    OTEL_TRACES_EXPORTER: logging
    OTEL_METRICS_EXPORTER: logging
    OTEL_LOG_LEVEL: DEBUG

    # Standard
    AWS_REGION_DEPLOYED: ${self:provider.region}
    AWS_ACCOUNT_ID:
      Ref:
        AWS::AccountId
    RESOURCE_PREFIX: ${self:service}-${self:provider.stage}-
    DEPLOYMENT_ENV: ${self:provider.stage}
    SERVICE: ${self:service}

    # Resources
    SNS_TOPIC_NAME: "${self:service}-otel-sns"
    SQS_QUEUE_NAME: "${self:service}-otel-sqs"
    S3_BUCKET_NAME: "${self:service}-otel-s3-bucket"
    STATE_MACHINE_NAME: "${self:service}-otel-state-machine"

resources:
  Resources:
    SNS:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.SNS_TOPIC_NAME}

    SQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE_NAME}

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}

functions:
  ExampleOpenTelemetry:
    handler: example.main
    layers:
      - !ImportValue sls-otel-collector-dev-OpenTelemetryCollectorLambdaLayerQualifiedArn
      - !ImportValue sls-otel-nodejs-dev-OpenTelemetryNodeJSLambdaLayerQualifiedArn

  ExampleReceiverOpenTelemetry:
    handler: example.receiver

stepFunctions:
  stateMachines:
    hellostepfunc1:
      name: ${self:provider.environment.STATE_MACHINE_NAME}
      definition:
        Comment: "AWS Lambda Function"
        StartAt: HelloWorld1
        States:
          HelloWorld1:
            Type: Task
            Resource:
              Fn::GetAtt: [ExampleReceiverOpenTelemetry, Arn]
            End: true
      events:
        - http:
            path: gofunction
            method: GET

plugins:
  - serverless-step-functions
